name: Build and Push Docker Image

on:
  push:
    branches:
      - dev
      - staging
      - prod
    paths:
      - 'app/**'
      - '.github/workflows/build-and-push.yml'
  pull_request:
    branches:
      - dev
      - staging
      - prod
    paths:
      - 'app/**'

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: nginx-iac/nginx

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: 
          - ${{ github.ref_name == 'dev' && 'dev' || github.ref_name == 'staging' && 'prelive' || github.ref_name == 'prod' && 'prod' || 'dev' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Set image tags
      id: tags
      run: |
        BRANCH_NAME=${{ github.ref_name }}
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        if [ "$BRANCH_NAME" = "prod" ]; then
          ENVIRONMENT="prod"
          TAG_SUFFIX="prod"
        elif [ "$BRANCH_NAME" = "staging" ]; then
          ENVIRONMENT="prelive"
          TAG_SUFFIX="prelive"
        else
          ENVIRONMENT="dev"
          TAG_SUFFIX="dev"
        fi
        
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "image_tag=${TAG_SUFFIX}-${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "latest_tag=${TAG_SUFFIX}-latest" >> $GITHUB_OUTPUT
        echo "full_tag=${TAG_SUFFIX}-${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT
        
    - name: Build Docker image
      run: |
        docker build \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${{ github.sha }} \
          --build-arg VERSION=${{ steps.tags.outputs.image_tag }} \
          -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.image_tag }} \
          -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.latest_tag }} \
          -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.full_tag }} \
          ./app
          
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.image_tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.image_tag }}
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'
        
    - name: Push image to Amazon ECR
      if: github.event_name == 'push'
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.image_tag }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.latest_tag }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.full_tag }}
        
    - name: Update deployment manifest
      if: github.event_name == 'push'
      run: |
        echo "Image built and pushed:"
        echo "Repository: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
        echo "Tags: ${{ steps.tags.outputs.image_tag }}, ${{ steps.tags.outputs.latest_tag }}, ${{ steps.tags.outputs.full_tag }}"
        echo "Environment: ${{ steps.tags.outputs.environment }}"
        
    - name: Create deployment artifact
      if: github.event_name == 'push'
      run: |
        mkdir -p artifacts
        cat > artifacts/deployment-info.json << EOF
        {
          "environment": "${{ steps.tags.outputs.environment }}",
          "image_repository": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}",
          "image_tag": "${{ steps.tags.outputs.image_tag }}",
          "full_tag": "${{ steps.tags.outputs.full_tag }}",
          "git_sha": "${{ github.sha }}",
          "git_ref": "${{ github.ref_name }}",
          "build_timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        }
        EOF
        
    - name: Upload deployment artifact
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info-${{ steps.tags.outputs.environment }}
        path: artifacts/deployment-info.json
        retention-days: 30
